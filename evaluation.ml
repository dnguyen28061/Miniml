(*
                         CS 51 Final Project
                         MiniML -- Evaluation
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)

open Expr ;;

(* Exception for evaluator runtime, generated by a runtime error *)
exception EvalError of string ;;
(* Exception for evaluator runtime, generated by an explicit "raise" construct *)
exception EvalException ;;


(*......................................................................
  Environments and values
 *)

module type Env_type = sig
    type env
    type value =
      | Val of expr
      | Closure of (expr * env)
    val create : unit -> env
    val close : expr -> env -> value
    val lookup : env -> varid -> value
    val extend : env -> varid -> value ref -> env
    val env_to_string : env -> string
    val value_to_string : ?printenvp:bool -> value -> string
  end

module Env : Env_type =
  struct
    type env = (varid * value ref) list
     and value =
       | Val of expr
       | Closure of (expr * env)

    (* Creates an empty environment *)
    let create () : env = [] ;;

    (* Creates a closure from an expression and the environment it's
       defined in *)
    let close (exp : expr) (env : env) : value =
      failwith "close not implemented" ;;

    (* Looks up the value of a variable in the environment *)
    let lookup (env : env) (varname : varid) : value =
      failwith "lookup not implemented" ;;

    (* Returns a new environment just like env except that it maps the
       variable varid to loc *)
    let extend (env : env) (varname : varid) (loc : value ref) : env =
      failwith "extend not implemented" ;;

    (* Returns a printable string representation of a value; the flag
       printenvp determines whether to include the environment in the
       string representation when called on a closure *)
    let value_to_string ?(printenvp : bool = true) (v : value) : string =
      failwith "value_to_string not implemented" ;;

    (* Returns a printable string representation of an environment *)
    let env_to_string (env : env) : string =
      failwith "env_to_string not implemented" ;;
  end
;;


(*......................................................................
  Evaluation functions

  Each of the evaluation functions below, evaluates an expression exp
  in an enviornment env returning a result of type value. We've
  provided an initial implementation for a trivial evaluator, which
  just converts the expression unchanged to a value and returns it,
  along with "stub code" for three more evaluators: a substitution
  model evaluator and dynamic and lexical environment model versions.

  Each evaluator is of type expr -> Env.env -> Env.value for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures).

  DO NOT CHANGE THE TYPE SIGNATURES OF THESE FUNCTIONS. Compilation
  against our unit tests relies on their having these signatures. If
  you want to implement an extension whose evaluator has a different
  signature, implement it as eval_e below.  *)

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)

let eval_t (exp : expr) (_env : Env.env) : Env.value =
  (* coerce the expr, unchanged, into a value *)
  Env.Val exp ;;

(* The SUBSTITUTION MODEL evaluator -- to be completed *)

exception UnboundVariable of string ;;
let rec eval_s (_exp : expr) (_env : Env.env) : Env.value =
  (* Took out the evaluation case for binop for easier readibility *)
  let empty = Env.create ()  in
  (* Helper that evaluates and then takes the expression *)
  let deval value = let Env.Val(x) = eval_s value empty in x in
  let binopeval op e1 e2 : expr =
    match op, deval e1, deval e2 with
    | Plus, (Num x), (Num y) -> Num (x + y)
    | Minus, Num x, Num y -> Num (x - y)
    | Times, Num x, Num y -> Num (x * y)
    | Equals, Num x, Num y -> Bool (x = y)
    | Equals, Bool x, Bool y -> Bool (x = y)
    | LessThan, Num x, Num y -> Bool (x < y)
    | Plus, _, _ | Minus, _, _ | Times, _, _
    | Equals, _, _ | LessThan, _, _ -> raise (EvalError "incompatible Binop types") in
   match _exp with
   | Var _ -> raise (EvalError "Free variables don't evaluate")
   | Num x -> Env.Val(Num(x))
   | Bool x -> Env.Val(Bool(x))
   | Unop (_, e1) ->
        (match deval e1 with
        | Num x -> Val(Num(- x))
        | Bool x -> Val(Bool(not x))
        | Unop (_, _) | Binop (_, _, _) | Fun (_, _) | Let (_, _, _)
        | Conditional (_, _, _) | Letrec (_, _, _) | Raise | Unassigned
        | App (_, _) | Var _ -> raise (EvalError "Unop not a bool/num type"))
   | Binop (op, e1, e2) -> Env.Val(binopeval op e1 e2)
   | Conditional (e1, e2, e3) ->
        let cond = deval e1 in
        if cond = Bool true then eval_s e2 empty
        else eval_s e3 empty
   | Fun (var, e) -> Env.Val(Fun(var,e))
   | Let (var, def, body) | Letrec (var, def, body) ->
     let def' = deval def in
     eval_s (subst var def' body) empty
   | App (e1, e2) ->
        (match deval e1 with
        | Fun (var, e1') -> eval_s (subst var e2 e1') empty
        | _ -> raise (EvalError "invalid function application"))
   | Raise -> raise (EvalError "Evaluation Error")
   | Unassigned -> raise (EvalError "Unassigned")
 ;;

(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator -- to be
   completed *)

let eval_d (_exp : expr) (_env : Env.env) : Env.value =
  failwith "eval_d not implemented" ;;

(* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator -- optionally
   completed as (part of) your extension *)

let eval_l (_exp : expr) (_env : Env.env) : Env.value =
  failwith "eval_l not implemented" ;;

(* The EXTENDED evaluator -- if you want, you can provide your
   extension as a separate evaluator, or if it is type- and
   correctness-compatible with one of the above, you can incorporate
   your extensions within eval_s, eval_d, or eval_l. *)

let eval_e _ =
  failwith "eval_e not implemented" ;;

(* Connecting the evaluators to the external world. The REPL in
   miniml.ml uses a call to the single function evaluate defined
   here. Initially, evaluate is the trivial evaluator eval_t. But you
   can define it to use any of the other evaluators as you proceed to
   implement them. (We will directly unit test the four evaluators
   above, not the evaluate function, so it doesn't matter how it's set
   when you submit your solution.) *)

let evaluate = eval_s ;;
